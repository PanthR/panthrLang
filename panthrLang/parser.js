/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,4],$V2=[1,8],$V3=[1,9],$V4=[1,10],$V5=[1,11],$V6=[1,12],$V7=[1,13],$V8=[1,14],$V9=[1,15],$Va=[1,16],$Vb=[1,17],$Vc=[1,18],$Vd=[1,19],$Ve=[1,20],$Vf=[1,21],$Vg=[1,22],$Vh=[1,23],$Vi=[1,27],$Vj=[1,24],$Vk=[1,25],$Vl=[1,26],$Vm=[1,29],$Vn=[5,6,46],$Vo=[5,6,21,46],$Vp=[1,53],$Vq=[1,33],$Vr=[1,34],$Vs=[1,35],$Vt=[1,36],$Vu=[1,37],$Vv=[1,38],$Vw=[1,39],$Vx=[1,40],$Vy=[1,41],$Vz=[1,42],$VA=[1,43],$VB=[1,44],$VC=[1,45],$VD=[1,46],$VE=[1,47],$VF=[1,48],$VG=[1,49],$VH=[1,50],$VI=[1,51],$VJ=[1,52],$VK=[2,16],$VL=[1,55],$VM=[1,56],$VN=[5,6,20,21,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,44,46,56,59,60,61],$VO=[1,32],$VP=[5,6,10,18,19,20,21,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,44,46,56,59,60,61],$VQ=[2,63],$VR=[5,6,21,44,46,56,61],$VS=[2,57],$VT=[1,91],$VU=[1,92],$VV=[21,56],$VW=[5,6,21,24,25,26,27,44,46,56,61],$VX=[5,6,21,22,24,25,26,27,28,29,30,31,33,34,35,36,37,38,39,40,44,46,56,61],$VY=[1,101],$VZ=[1,102],$V_=[5,6,21,24,25,26,27,28,29,30,31,33,34,35,36,37,38,39,40,44,46,56,61],$V$=[5,6,21,24,26,44,46,56,61],$V01=[5,6,21,24,25,26,27,28,29,35,36,37,38,39,40,44,46,56,61],$V11=[5,6,21,24,25,26,27,28,29,30,31,35,36,37,38,39,40,44,46,56,61],$V21=[21,61],$V31=[21,56,61];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expression":3,"exprList":4,"EOF":5,"EOL":6,"topExpr":7,"expr":8,"lvalue":9,"EQUALS":10,"NUM":11,"HEXNUM":12,"STRING":13,"TRUE":14,"FALSE":15,"MISSING":16,"NULL":17,"LARROW":18,"LLARROW":19,"(":20,")":21,":":22,"!":23,"|":24,"&":25,"||":26,"&&":27,"+":28,"-":29,"*":30,"/":31,"^":32,"DIV":33,"MOD":34,"<":35,">":36,"<=":37,">=":38,"==":39,"!=":40,"FUN":41,"formals":42,"IF":43,"ELSE":44,"{":45,"}":46,"WHILE":47,"FOR":48,"VAR":49,"IN":50,"BREAK":51,"NEXT":52,"LIBRARY":53,"actuals":54,"actual":55,",":56,"DOTS":57,"formal":58,"DOLLAR":59,"[":60,"]":61,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"EOL",10:"EQUALS",11:"NUM",12:"HEXNUM",13:"STRING",14:"TRUE",15:"FALSE",16:"MISSING",17:"NULL",18:"LARROW",19:"LLARROW",20:"(",21:")",22:":",23:"!",24:"|",25:"&",26:"||",27:"&&",28:"+",29:"-",30:"*",31:"/",32:"^",33:"DIV",34:"MOD",35:"<",36:">",37:"<=",38:">=",39:"==",40:"!=",41:"FUN",43:"IF",44:"ELSE",45:"{",46:"}",47:"WHILE",48:"FOR",49:"VAR",50:"IN",51:"BREAK",52:"NEXT",53:"LIBRARY",56:",",57:"DOTS",59:"DOLLAR",60:"[",61:"]"},
productions_: [0,[3,2],[4,3],[4,2],[4,1],[4,1],[4,1],[7,1],[7,3],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,3],[8,3],[8,2],[8,3],[8,3],[8,2],[8,3],[8,3],[8,3],[8,3],[8,2],[8,2],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,4],[8,5],[8,5],[8,7],[8,3],[8,5],[8,7],[8,1],[8,1],[8,4],[54,3],[54,1],[55,1],[55,3],[55,1],[55,0],[42,3],[42,1],[58,1],[58,3],[58,1],[9,1],[9,3],[9,4],[9,6],[9,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 yy.emit($$[$0-1]); 
break;
case 2:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 3:
 this.$ = $$[$0-1]; 
break;
case 4: case 53: case 59:
 this.$ = [$$[$0]]; 
break;
case 5:
 this.$ = []; 
break;
case 6:
 this.$ = [Node.error(yy.lexer.yylloc, yy.parser.myError)]; 
break;
case 7: case 16: case 19: case 54:
 this.$ = $$[$0]; 
break;
case 8: case 17:
 this.$ = Node.assign(yy.lexer.yylloc, $$[$0-2], $$[$0]); 
break;
case 9:
 this.$ = Node.number(yy.lexer.yylloc, parseFloat($$[$0])); 
break;
case 10:
 this.$ = Node.number(yy.lexer.yylloc, parseInt($$[$0])); 
break;
case 11:
 this.$ = Node.string(yy.lexer.yylloc, $$[$0]); 
break;
case 12:
 this.$ = Node.boolean(yy.lexer.yylloc, true); 
break;
case 13:
 this.$ = Node.boolean(yy.lexer.yylloc, false); 
break;
case 14:
 this.$ = Node.missing(yy.lexer.yylloc); 
break;
case 15:
 this.$ = Node.null(yy.lexer.yylloc); 
break;
case 18:
 this.$ = Node.assignExisting(yy.lexer.yylloc, $$[$0-2], $$[$0]); 
break;
case 20:
 this.$ = Node.parens(yy.lexer.yylloc, $$[$0-1]); 
break;
case 21:
 this.$ = Node.range(yy.lexer.yylloc, $$[$0-2], $$[$0]); 
break;
case 22:
 this.$ = Node.funCall(yy.lexer.yylloc, '!', [$$[$0]]); 
break;
case 23:
 this.$ = Node.funCall(yy.lexer.yylloc, '|', [$$[$0-2], $$[$0]]); 
break;
case 24:
 this.$ = Node.funCall(yy.lexer.yylloc, '&', [$$[$0-2], $$[$0]]); 
break;
case 25:
 this.$ = Node.funCall(yy.lexer.yylloc, '||', [$$[$0-2], $$[$0]]); 
break;
case 26:
 this.$ = Node.funCall(yy.lexer.yylloc, '&&', [$$[$0-2], $$[$0]]); 
break;
case 27:
 this.$ = Node.funCall(yy.lexer.yylloc, '+', [$$[$0]]); 
break;
case 28:
 this.$ = Node.funCall(yy.lexer.yylloc, '-', [$$[$0]]); 
break;
case 29:
 this.$ = Node.funCall(yy.lexer.yylloc, '+', [$$[$0-2], $$[$0]]); 
break;
case 30:
 this.$ = Node.funCall(yy.lexer.yylloc, '-', [$$[$0-2], $$[$0]]); 
break;
case 31:
 this.$ = Node.funCall(yy.lexer.yylloc, '*', [$$[$0-2], $$[$0]]); 
break;
case 32:
 this.$ = Node.funCall(yy.lexer.yylloc, '/', [$$[$0-2], $$[$0]]); 
break;
case 33:
 this.$ = Node.funCall(yy.lexer.yylloc, '^', [$$[$0-2], $$[$0]]); 
break;
case 34:
 this.$ = Node.funCall(yy.lexer.yylloc, '%/%', [$$[$0-2], $$[$0]]); 
break;
case 35:
 this.$ = Node.funCall(yy.lexer.yylloc, '%%', [$$[$0-2], $$[$0]]); 
break;
case 36:
 this.$ = Node.funCall(yy.lexer.yylloc, '<', [$$[$0-2], $$[$0]]); 
break;
case 37:
 this.$ = Node.funCall(yy.lexer.yylloc, '>', [$$[$0-2], $$[$0]]); 
break;
case 38:
 this.$ = Node.funCall(yy.lexer.yylloc, '<=', [$$[$0-2], $$[$0]]); 
break;
case 39:
 this.$ = Node.funCall(yy.lexer.yylloc, '>=', [$$[$0-2], $$[$0]]); 
break;
case 40:
 this.$ = Node.funCall(yy.lexer.yylloc, '==', [$$[$0-2], $$[$0]]); 
break;
case 41:
 this.$ = Node.funCall(yy.lexer.yylloc, '!=', [$$[$0-2], $$[$0]]); 
break;
case 42:
 this.$ = Node.funDef(yy.lexer.yylloc, [], $$[$0]); 
break;
case 43:
 this.$ = Node.funDef(yy.lexer.yylloc, $$[$0-2], $$[$0]); 
break;
case 44:
 this.$ = Node.if(yy.lexer.yylloc, $$[$0-2], $$[$0]); 
break;
case 45:
 this.$ = Node.if(yy.lexer.yylloc, $$[$0-4], $$[$0-2], $$[$0]); 
break;
case 46:
 this.$ = Node.block(yy.lexer.yylloc, $$[$0-1]); 
break;
case 47:
 this.$ = Node.while(yy.lexer.yylloc, $$[$0-2], $$[$0]); 
break;
case 48:
 this.$ = Node.for(yy.lexer.yylloc, $$[$0-4], $$[$0-2], $$[$0]); 
break;
case 49:
 this.$ = Node.break(yy.lexer.yylloc); 
break;
case 50:
 this.$ = Node.next(yy.lexer.yylloc); 
break;
case 51:
 this.$ = Node.library(yy.lexer.yylloc, $$[$0-1]); 
break;
case 52: case 58:
 $$[$0].unshift($$[$0-2]); this.$ = $$[$0]; 
break;
case 55:
 this.$ = Node.argNamed(yy.lexer.yylloc, $$[$0-2], $$[$0]); 
break;
case 56:
 this.$ = Node.argDots(yy.lexer.yylloc); 
break;
case 57:
 this.$ = Node.argEmpty(yy.lexer.yylloc); 
break;
case 60:
 this.$ = Node.param(yy.lexer.yylloc, $$[$0]); 
break;
case 61:
 this.$ = Node.paramDefault(yy.lexer.yylloc, $$[$0-2], $$[$0]); 
break;
case 62:
 this.$ = Node.paramDots(yy.lexer.yylloc); 
break;
case 63:
 this.$ = Node.variable(yy.lexer.yylloc, $$[$0]); 
break;
case 64:
 this.$ = Node.dollarAccess(yy.lexer.yylloc, $$[$0-2], $$[$0]); 
break;
case 65:
 this.$ = Node.singleBracketAccess(yy.lexer.yylloc, $$[$0-3], $$[$0-1]); 
break;
case 66:
 this.$ = Node.dblBracketAccess(yy.lexer.yylloc, $$[$0-5], $$[$0-2]); 
break;
case 67:
 this.$ = Node.funCall(yy.lexer.yylloc, $$[$0-3], $$[$0-1]); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:$V1,7:3,8:6,9:7,11:$V2,12:$V3,13:$V4,14:$V5,15:$V6,16:$V7,17:$V8,20:$V9,23:$Va,28:$Vb,29:$Vc,41:$Vd,43:$Ve,45:$Vf,47:$Vg,48:$Vh,49:$Vi,51:$Vj,52:$Vk,53:$Vl},{1:[3]},{5:[1,28],6:$Vm},o($Vn,[2,4]),o($Vn,[2,5],{8:30,9:31,11:$V2,12:$V3,13:$V4,14:$V5,15:$V6,16:$V7,17:$V8,20:$V9,23:$Va,28:$Vb,29:$Vc,41:$Vd,43:$Ve,45:$Vf,47:$Vg,48:$Vh,49:$Vi,51:$Vj,52:$Vk,53:$Vl}),o($Vn,[2,6]),o($Vo,[2,7],{20:$Vp,22:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,32:$Vz,33:$VA,34:$VB,35:$VC,36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,59:$VI,60:$VJ}),o([5,6,20,21,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,46,59,60],$VK,{10:[1,54],18:$VL,19:$VM}),o($VN,[2,9]),o($VN,[2,10]),o($VN,[2,11]),o($VN,[2,12]),o($VN,[2,13]),o($VN,[2,14]),o($VN,[2,15]),{6:$VO,7:57,8:6,9:7,11:$V2,12:$V3,13:$V4,14:$V5,15:$V6,16:$V7,17:$V8,20:$V9,23:$Va,28:$Vb,29:$Vc,41:$Vd,43:$Ve,45:$Vf,47:$Vg,48:$Vh,49:$Vi,51:$Vj,52:$Vk,53:$Vl},{6:$VO,8:58,9:31,11:$V2,12:$V3,13:$V4,14:$V5,15:$V6,16:$V7,17:$V8,20:$V9,23:$Va,28:$Vb,29:$Vc,41:$Vd,43:$Ve,45:$Vf,47:$Vg,48:$Vh,49:$Vi,51:$Vj,52:$Vk,53:$Vl},{6:$VO,8:59,9:31,11:$V2,12:$V3,13:$V4,14:$V5,15:$V6,16:$V7,17:$V8,20:$V9,23:$Va,28:$Vb,29:$Vc,41:$Vd,43:$Ve,45:$Vf,47:$Vg,48:$Vh,49:$Vi,51:$Vj,52:$Vk,53:$Vl},{6:$VO,8:60,9:31,11:$V2,12:$V3,13:$V4,14:$V5,15:$V6,16:$V7,17:$V8,20:$V9,23:$Va,28:$Vb,29:$Vc,41:$Vd,43:$Ve,45:$Vf,47:$Vg,48:$Vh,49:$Vi,51:$Vj,52:$Vk,53:$Vl},{20:[1,61]},{20:[1,62]},{2:$V0,4:63,6:$V1,7:3,8:6,9:7,11:$V2,12:$V3,13:$V4,14:$V5,15:$V6,16:$V7,17:$V8,20:$V9,23:$Va,28:$Vb,29:$Vc,41:$Vd,43:$Ve,45:$Vf,47:$Vg,48:$Vh,49:$Vi,51:$Vj,52:$Vk,53:$Vl},{20:[1,64]},{20:[1,65]},o($VN,[2,49]),o($VN,[2,50]),{20:[1,66]},o($VP,$VQ),{1:[2,1]},o($Vn,[2,3],{8:6,9:7,7:67,11:$V2,12:$V3,13:$V4,14:$V5,15:$V6,16:$V7,17:$V8,20:$V9,23:$Va,28:$Vb,29:$Vc,41:$Vd,43:$Ve,45:$Vf,47:$Vg,48:$Vh,49:$Vi,51:$Vj,52:$Vk,53:$Vl}),o($VR,[2,19],{20:$Vp,22:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,32:$Vz,33:$VA,34:$VB,35:$VC,36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,59:$VI,60:$VJ}),o($VN,$VK,{18:$VL,19:$VM}),{6:$VO,8:30,9:31,11:$V2,12:$V3,13:$V4,14:$V5,15:$V6,16:$V7,17:$V8,20:$V9,23:$Va,28:$Vb,29:$Vc,41:$Vd,43:$Ve,45:$Vf,47:$Vg,48:$Vh,49:$Vi,51:$Vj,52:$Vk,53:$Vl},{6:$VO,8:68,9:31,11:$V2,12:$V3,13:$V4,14:$V5,15:$V6,16:$V7,17:$V8,20:$V9,23:$Va,28:$Vb,29:$Vc,41:$Vd,43:$Ve,45:$Vf,47:$Vg,48:$Vh,49:$Vi,51:$Vj,52:$Vk,53:$Vl},{6:$VO,8:69,9:31,11:$V2,12:$V3,13:$V4,14:$V5,15:$V6,16:$V7,17:$V8,20:$V9,23:$Va,28:$Vb,29:$Vc,41:$Vd,43:$Ve,45:$Vf,47:$Vg,48:$Vh,49:$Vi,51:$Vj,52:$Vk,53:$Vl},{6:$VO,8:70,9:31,11:$V2,12:$V3,13:$V4,14:$V5,15:$V6,16:$V7,17:$V8,20:$V9,23:$Va,28:$Vb,29:$Vc,41:$Vd,43:$Ve,45:$Vf,47:$Vg,48:$Vh,49:$Vi,51:$Vj,52:$Vk,53:$Vl},{6:$VO,8:71,9:31,11:$V2,12:$V3,13:$V4,14:$V5,15:$V6,16:$V7,17:$V8,20:$V9,23:$Va,28:$Vb,29:$Vc,41:$Vd,43:$Ve,45:$Vf,47:$Vg,48:$Vh,49:$Vi,51:$Vj,52:$Vk,53:$Vl},{6:$VO,8:72,9:31,11:$V2,12:$V3,13:$V4,14:$V5,15:$V6,16:$V7,17:$V8,20:$V9,23:$Va,28:$Vb,29:$Vc,41:$Vd,43:$Ve,45:$Vf,47:$Vg,48:$Vh,49:$Vi,51:$Vj,52:$Vk,53:$Vl},{6:$VO,8:73,9:31,11:$V2,12:$V3,13:$V4,14:$V5,15:$V6,16:$V7,17:$V8,20:$V9,23:$Va,28:$Vb,29:$Vc,41:$Vd,43:$Ve,45:$Vf,47:$Vg,48:$Vh,49:$Vi,51:$Vj,52:$Vk,53:$Vl},{6:$VO,8:74,9:31,11:$V2,12:$V3,13:$V4,14:$V5,15:$V6,16:$V7,17:$V8,20:$V9,23:$Va,28:$Vb,29:$Vc,41:$Vd,43:$Ve,45:$Vf,47:$Vg,48:$Vh,49:$Vi,51:$Vj,52:$Vk,53:$Vl},{6:$VO,8:75,9:31,11:$V2,12:$V3,13:$V4,14:$V5,15:$V6,16:$V7,17:$V8,20:$V9,23:$Va,28:$Vb,29:$Vc,41:$Vd,43:$Ve,45:$Vf,47:$Vg,48:$Vh,49:$Vi,51:$Vj,52:$Vk,53:$Vl},{6:$VO,8:76,9:31,11:$V2,12:$V3,13:$V4,14:$V5,15:$V6,16:$V7,17:$V8,20:$V9,23:$Va,28:$Vb,29:$Vc,41:$Vd,43:$Ve,45:$Vf,47:$Vg,48:$Vh,49:$Vi,51:$Vj,52:$Vk,53:$Vl},{6:$VO,8:77,9:31,11:$V2,12:$V3,13:$V4,14:$V5,15:$V6,16:$V7,17:$V8,20:$V9,23:$Va,28:$Vb,29:$Vc,41:$Vd,43:$Ve,45:$Vf,47:$Vg,48:$Vh,49:$Vi,51:$Vj,52:$Vk,53:$Vl},{6:$VO,8:78,9:31,11:$V2,12:$V3,13:$V4,14:$V5,15:$V6,16:$V7,17:$V8,20:$V9,23:$Va,28:$Vb,29:$Vc,41:$Vd,43:$Ve,45:$Vf,47:$Vg,48:$Vh,49:$Vi,51:$Vj,52:$Vk,53:$Vl},{6:$VO,8:79,9:31,11:$V2,12:$V3,13:$V4,14:$V5,15:$V6,16:$V7,17:$V8,20:$V9,23:$Va,28:$Vb,29:$Vc,41:$Vd,43:$Ve,45:$Vf,47:$Vg,48:$Vh,49:$Vi,51:$Vj,52:$Vk,53:$Vl},{6:$VO,8:80,9:31,11:$V2,12:$V3,13:$V4,14:$V5,15:$V6,16:$V7,17:$V8,20:$V9,23:$Va,28:$Vb,29:$Vc,41:$Vd,43:$Ve,45:$Vf,47:$Vg,48:$Vh,49:$Vi,51:$Vj,52:$Vk,53:$Vl},{6:$VO,8:81,9:31,11:$V2,12:$V3,13:$V4,14:$V5,15:$V6,16:$V7,17:$V8,20:$V9,23:$Va,28:$Vb,29:$Vc,41:$Vd,43:$Ve,45:$Vf,47:$Vg,48:$Vh,49:$Vi,51:$Vj,52:$Vk,53:$Vl},{6:$VO,8:82,9:31,11:$V2,12:$V3,13:$V4,14:$V5,15:$V6,16:$V7,17:$V8,20:$V9,23:$Va,28:$Vb,29:$Vc,41:$Vd,43:$Ve,45:$Vf,47:$Vg,48:$Vh,49:$Vi,51:$Vj,52:$Vk,53:$Vl},{6:$VO,8:83,9:31,11:$V2,12:$V3,13:$V4,14:$V5,15:$V6,16:$V7,17:$V8,20:$V9,23:$Va,28:$Vb,29:$Vc,41:$Vd,43:$Ve,45:$Vf,47:$Vg,48:$Vh,49:$Vi,51:$Vj,52:$Vk,53:$Vl},{6:$VO,8:84,9:31,11:$V2,12:$V3,13:$V4,14:$V5,15:$V6,16:$V7,17:$V8,20:$V9,23:$Va,28:$Vb,29:$Vc,41:$Vd,43:$Ve,45:$Vf,47:$Vg,48:$Vh,49:$Vi,51:$Vj,52:$Vk,53:$Vl},{6:$VO,8:85,9:31,11:$V2,12:$V3,13:$V4,14:$V5,15:$V6,16:$V7,17:$V8,20:$V9,23:$Va,28:$Vb,29:$Vc,41:$Vd,43:$Ve,45:$Vf,47:$Vg,48:$Vh,49:$Vi,51:$Vj,52:$Vk,53:$Vl},{49:[1,86]},o([56,61],$VS,{9:31,54:87,55:89,8:90,6:$VO,11:$V2,12:$V3,13:$V4,14:$V5,15:$V6,16:$V7,17:$V8,20:$V9,23:$Va,28:$Vb,29:$Vc,41:$Vd,43:$Ve,45:$Vf,47:$Vg,48:$Vh,49:$VT,51:$Vj,52:$Vk,53:$Vl,57:$VU,60:[1,88]}),o($VV,$VS,{9:31,55:89,8:90,54:93,6:$VO,11:$V2,12:$V3,13:$V4,14:$V5,15:$V6,16:$V7,17:$V8,20:$V9,23:$Va,28:$Vb,29:$Vc,41:$Vd,43:$Ve,45:$Vf,47:$Vg,48:$Vh,49:$VT,51:$Vj,52:$Vk,53:$Vl,57:$VU}),{6:$VO,8:94,9:31,11:$V2,12:$V3,13:$V4,14:$V5,15:$V6,16:$V7,17:$V8,20:$V9,23:$Va,28:$Vb,29:$Vc,41:$Vd,43:$Ve,45:$Vf,47:$Vg,48:$Vh,49:$Vi,51:$Vj,52:$Vk,53:$Vl},{6:$VO,8:95,9:31,11:$V2,12:$V3,13:$V4,14:$V5,15:$V6,16:$V7,17:$V8,20:$V9,23:$Va,28:$Vb,29:$Vc,41:$Vd,43:$Ve,45:$Vf,47:$Vg,48:$Vh,49:$Vi,51:$Vj,52:$Vk,53:$Vl},{6:$VO,8:96,9:31,11:$V2,12:$V3,13:$V4,14:$V5,15:$V6,16:$V7,17:$V8,20:$V9,23:$Va,28:$Vb,29:$Vc,41:$Vd,43:$Ve,45:$Vf,47:$Vg,48:$Vh,49:$Vi,51:$Vj,52:$Vk,53:$Vl},{21:[1,97]},o($VW,[2,22],{20:$Vp,22:$Vq,28:$Vv,29:$Vw,30:$Vx,31:$Vy,32:$Vz,33:$VA,34:$VB,35:$VC,36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,59:$VI,60:$VJ}),o($VX,[2,27],{20:$Vp,32:$Vz,59:$VI,60:$VJ}),o($VX,[2,28],{20:$Vp,32:$Vz,59:$VI,60:$VJ}),{21:[1,98],42:99,49:$VY,57:$VZ,58:100},{6:$VO,8:103,9:31,11:$V2,12:$V3,13:$V4,14:$V5,15:$V6,16:$V7,17:$V8,20:$V9,23:$Va,28:$Vb,29:$Vc,41:$Vd,43:$Ve,45:$Vf,47:$Vg,48:$Vh,49:$Vi,51:$Vj,52:$Vk,53:$Vl},{6:$Vm,46:[1,104]},{6:$VO,8:105,9:31,11:$V2,12:$V3,13:$V4,14:$V5,15:$V6,16:$V7,17:$V8,20:$V9,23:$Va,28:$Vb,29:$Vc,41:$Vd,43:$Ve,45:$Vf,47:$Vg,48:$Vh,49:$Vi,51:$Vj,52:$Vk,53:$Vl},{49:[1,106]},{49:[1,107]},o($Vn,[2,2]),o($V_,[2,21],{20:$Vp,32:$Vz,59:$VI,60:$VJ}),o($V$,[2,23],{20:$Vp,22:$Vq,25:$Vs,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,32:$Vz,33:$VA,34:$VB,35:$VC,36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,59:$VI,60:$VJ}),o($VW,[2,24],{20:$Vp,22:$Vq,28:$Vv,29:$Vw,30:$Vx,31:$Vy,32:$Vz,33:$VA,34:$VB,35:$VC,36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,59:$VI,60:$VJ}),o($V$,[2,25],{20:$Vp,22:$Vq,25:$Vs,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,32:$Vz,33:$VA,34:$VB,35:$VC,36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,59:$VI,60:$VJ}),o($VW,[2,26],{20:$Vp,22:$Vq,28:$Vv,29:$Vw,30:$Vx,31:$Vy,32:$Vz,33:$VA,34:$VB,35:$VC,36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,59:$VI,60:$VJ}),o($V01,[2,29],{20:$Vp,22:$Vq,30:$Vx,31:$Vy,32:$Vz,33:$VA,34:$VB,59:$VI,60:$VJ}),o($V01,[2,30],{20:$Vp,22:$Vq,30:$Vx,31:$Vy,32:$Vz,33:$VA,34:$VB,59:$VI,60:$VJ}),o($V11,[2,31],{20:$Vp,22:$Vq,32:$Vz,33:$VA,34:$VB,59:$VI,60:$VJ}),o($V11,[2,32],{20:$Vp,22:$Vq,32:$Vz,33:$VA,34:$VB,59:$VI,60:$VJ}),o($VX,[2,33],{20:$Vp,32:$Vz,59:$VI,60:$VJ}),o($V_,[2,34],{20:$Vp,22:$Vq,32:$Vz,59:$VI,60:$VJ}),o($V_,[2,35],{20:$Vp,22:$Vq,32:$Vz,59:$VI,60:$VJ}),o($VW,[2,36],{20:$Vp,22:$Vq,28:$Vv,29:$Vw,30:$Vx,31:$Vy,32:$Vz,33:$VA,34:$VB,59:$VI,60:$VJ}),o($VW,[2,37],{20:$Vp,22:$Vq,28:$Vv,29:$Vw,30:$Vx,31:$Vy,32:$Vz,33:$VA,34:$VB,59:$VI,60:$VJ}),o($VW,[2,38],{20:$Vp,22:$Vq,28:$Vv,29:$Vw,30:$Vx,31:$Vy,32:$Vz,33:$VA,34:$VB,59:$VI,60:$VJ}),o($VW,[2,39],{20:$Vp,22:$Vq,28:$Vv,29:$Vw,30:$Vx,31:$Vy,32:$Vz,33:$VA,34:$VB,59:$VI,60:$VJ}),o($VW,[2,40],{20:$Vp,22:$Vq,28:$Vv,29:$Vw,30:$Vx,31:$Vy,32:$Vz,33:$VA,34:$VB,59:$VI,60:$VJ}),o($VW,[2,41],{20:$Vp,22:$Vq,28:$Vv,29:$Vw,30:$Vx,31:$Vy,32:$Vz,33:$VA,34:$VB,59:$VI,60:$VJ}),o($VP,[2,64]),{61:[1,108]},{6:$VO,8:109,9:31,11:$V2,12:$V3,13:$V4,14:$V5,15:$V6,16:$V7,17:$V8,20:$V9,23:$Va,28:$Vb,29:$Vc,41:$Vd,43:$Ve,45:$Vf,47:$Vg,48:$Vh,49:$Vi,51:$Vj,52:$Vk,53:$Vl},o($V21,[2,53],{56:[1,110]}),o($V31,[2,54],{20:$Vp,22:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,32:$Vz,33:$VA,34:$VB,35:$VC,36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,59:$VI,60:$VJ}),o([18,19,20,21,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,56,59,60,61],$VQ,{10:[1,111]}),o($V31,[2,56]),{21:[1,112]},o($Vo,[2,8],{20:$Vp,22:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,32:$Vz,33:$VA,34:$VB,35:$VC,36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,59:$VI,60:$VJ}),o($VR,[2,17],{20:$Vp,22:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,32:$Vz,33:$VA,34:$VB,35:$VC,36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,59:$VI,60:$VJ}),o($VR,[2,18],{20:$Vp,22:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,32:$Vz,33:$VA,34:$VB,35:$VC,36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,59:$VI,60:$VJ}),o($VN,[2,20]),{6:$VO,8:113,9:31,11:$V2,12:$V3,13:$V4,14:$V5,15:$V6,16:$V7,17:$V8,20:$V9,23:$Va,28:$Vb,29:$Vc,41:$Vd,43:$Ve,45:$Vf,47:$Vg,48:$Vh,49:$Vi,51:$Vj,52:$Vk,53:$Vl},{21:[1,114]},{21:[2,59],56:[1,115]},o($VV,[2,60],{10:[1,116]}),o($VV,[2,62]),{20:$Vp,21:[1,117],22:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,32:$Vz,33:$VA,34:$VB,35:$VC,36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,59:$VI,60:$VJ},o($VN,[2,46]),{20:$Vp,21:[1,118],22:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,32:$Vz,33:$VA,34:$VB,35:$VC,36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,59:$VI,60:$VJ},{50:[1,119]},{21:[1,120]},o($VP,[2,65]),{20:$Vp,22:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,32:$Vz,33:$VA,34:$VB,35:$VC,36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,59:$VI,60:$VJ,61:[1,121]},o($V31,$VS,{9:31,55:89,8:90,54:122,6:$VO,11:$V2,12:$V3,13:$V4,14:$V5,15:$V6,16:$V7,17:$V8,20:$V9,23:$Va,28:$Vb,29:$Vc,41:$Vd,43:$Ve,45:$Vf,47:$Vg,48:$Vh,49:$VT,51:$Vj,52:$Vk,53:$Vl,57:$VU}),{6:$VO,8:123,9:31,11:$V2,12:$V3,13:$V4,14:$V5,15:$V6,16:$V7,17:$V8,20:$V9,23:$Va,28:$Vb,29:$Vc,41:$Vd,43:$Ve,45:$Vf,47:$Vg,48:$Vh,49:$Vi,51:$Vj,52:$Vk,53:$Vl},o($VP,[2,67]),o($VR,[2,42],{20:$Vp,22:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,32:$Vz,33:$VA,34:$VB,35:$VC,36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,59:$VI,60:$VJ}),{6:$VO,8:124,9:31,11:$V2,12:$V3,13:$V4,14:$V5,15:$V6,16:$V7,17:$V8,20:$V9,23:$Va,28:$Vb,29:$Vc,41:$Vd,43:$Ve,45:$Vf,47:$Vg,48:$Vh,49:$Vi,51:$Vj,52:$Vk,53:$Vl},{42:125,49:$VY,57:$VZ,58:100},{6:$VO,8:126,9:31,11:$V2,12:$V3,13:$V4,14:$V5,15:$V6,16:$V7,17:$V8,20:$V9,23:$Va,28:$Vb,29:$Vc,41:$Vd,43:$Ve,45:$Vf,47:$Vg,48:$Vh,49:$Vi,51:$Vj,52:$Vk,53:$Vl},{6:$VO,8:127,9:31,11:$V2,12:$V3,13:$V4,14:$V5,15:$V6,16:$V7,17:$V8,20:$V9,23:$Va,28:$Vb,29:$Vc,41:$Vd,43:$Ve,45:$Vf,47:$Vg,48:$Vh,49:$Vi,51:$Vj,52:$Vk,53:$Vl},{6:$VO,8:128,9:31,11:$V2,12:$V3,13:$V4,14:$V5,15:$V6,16:$V7,17:$V8,20:$V9,23:$Va,28:$Vb,29:$Vc,41:$Vd,43:$Ve,45:$Vf,47:$Vg,48:$Vh,49:$Vi,51:$Vj,52:$Vk,53:$Vl},{6:$VO,8:129,9:31,11:$V2,12:$V3,13:$V4,14:$V5,15:$V6,16:$V7,17:$V8,20:$V9,23:$Va,28:$Vb,29:$Vc,41:$Vd,43:$Ve,45:$Vf,47:$Vg,48:$Vh,49:$Vi,51:$Vj,52:$Vk,53:$Vl},o($VN,[2,51]),{61:[1,130]},o($V21,[2,52]),o($V31,[2,55],{20:$Vp,22:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,32:$Vz,33:$VA,34:$VB,35:$VC,36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,59:$VI,60:$VJ}),o($VR,[2,43],{20:$Vp,22:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,32:$Vz,33:$VA,34:$VB,35:$VC,36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,59:$VI,60:$VJ}),{21:[2,58]},o($VV,[2,61],{20:$Vp,22:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,32:$Vz,33:$VA,34:$VB,35:$VC,36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,59:$VI,60:$VJ}),o([5,6,21,46,56,61],[2,44],{20:$Vp,22:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,32:$Vz,33:$VA,34:$VB,35:$VC,36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,44:[1,131],59:$VI,60:$VJ}),o($VR,[2,47],{20:$Vp,22:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,32:$Vz,33:$VA,34:$VB,35:$VC,36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,59:$VI,60:$VJ}),{20:$Vp,21:[1,132],22:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,32:$Vz,33:$VA,34:$VB,35:$VC,36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,59:$VI,60:$VJ},o($VP,[2,66]),{6:$VO,8:133,9:31,11:$V2,12:$V3,13:$V4,14:$V5,15:$V6,16:$V7,17:$V8,20:$V9,23:$Va,28:$Vb,29:$Vc,41:$Vd,43:$Ve,45:$Vf,47:$Vg,48:$Vh,49:$Vi,51:$Vj,52:$Vk,53:$Vl},{6:$VO,8:134,9:31,11:$V2,12:$V3,13:$V4,14:$V5,15:$V6,16:$V7,17:$V8,20:$V9,23:$Va,28:$Vb,29:$Vc,41:$Vd,43:$Ve,45:$Vf,47:$Vg,48:$Vh,49:$Vi,51:$Vj,52:$Vk,53:$Vl},o($VR,[2,45],{20:$Vp,22:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,32:$Vz,33:$VA,34:$VB,35:$VC,36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,59:$VI,60:$VJ}),o($VR,[2,48],{20:$Vp,22:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,32:$Vz,33:$VA,34:$VB,35:$VC,36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,59:$VI,60:$VJ})],
defaultActions: {28:[2,1],125:[2,58]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

   Node = require('./node');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:this.begin('backtick');
break;
case 1:return 49;
break;
case 2:this.popState();
break;
case 3:this.begin('doublequote');
break;
case 4:this.popState();
break;
case 5:return 13;
break;
case 6:this.begin('singlequote');
break;
case 7:this.popState();
break;
case 8:return 13;
break;
case 9:/* skip whitespace */
break;
case 10:return 12;
break;
case 11:return 11;
break;
case 12:return 6;
break;
case 13:return 27;
break;
case 14:return 26;
break;
case 15:return 41;
break;
case 16:return 41;
break;
case 17:return 43;
break;
case 18:return 44;
break;
case 19:return 47;
break;
case 20:return 48;
break;
case 21:return 50;
break;
case 22:return 51;
break;
case 23:return 52;
break;
case 24:return 17;
break;
case 25:return 14;
break;
case 26:return 15;
break;
case 27:return 16;
break;
case 28:return 53;
break;
case 29:return 18;
break;
case 30:return 19;
break;
case 31:return yy_.yytext;
break;
case 32:return 10;
break;
case 33:return yy_.yytext;
break;
case 34:return 57;
break;
case 35:return 59;
break;
case 36:return 34;
break;
case 37:return 33;
break;
case 38:return 49;
break;
case 39:return 5;
break;
}
},
rules: [/^(?:`)/,/^(?:[^` \t\n]+)/,/^(?:`)/,/^(?:")/,/^(?:")/,/^(?:(\\.|[^"])*)/,/^(?:')/,/^(?:')/,/^(?:(\\.|[^'])*)/,/^(?:[ \t]+)/,/^(?:0x[0-9a-fA-F]+)/,/^(?:((0|[1-9][0-9]*)(\.[0-9]*)?|\.[0-9]+)([eE][+-]?[0-9]+)?)/,/^(?:\n|;)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:function\b)/,/^(?:fun\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:break\b)/,/^(?:next\b)/,/^(?:NULL\b)/,/^(?:TRUE\b)/,/^(?:FALSE\b)/,/^(?:NA|NaN\b)/,/^(?:library\b)/,/^(?:<-)/,/^(?:<<-)/,/^(?:<=|>=|<|>|==|!=)/,/^(?:=)/,/^(?:[:+\-*^\/\,()\[\]\{\}\!\|\&])/,/^(?:\.\.\.)/,/^(?:\$)/,/^(?:%%)/,/^(?:%\/%)/,/^(?:[a-zA-Z\_][\w\.]*|\.[a-zA-Z\_\.]\w*)/,/^(?:$)/],
conditions: {"singlequote":{"rules":[7,8],"inclusive":false},"doublequote":{"rules":[4,5],"inclusive":false},"backtick":{"rules":[1,2],"inclusive":false},"INITIAL":{"rules":[0,3,6,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}